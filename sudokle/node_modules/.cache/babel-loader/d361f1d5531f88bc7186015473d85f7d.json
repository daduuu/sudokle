{"ast":null,"code":"var _jsxFileName = \"/Users/daviddu/Desktop/sudokle/sudokle/src/SudokuGrid.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './SudokuGrid.css';\nimport classNames from 'classnames';\nimport { makePuzzle, pluck, printPuzzle } from \"./sudoku\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    /*const {puzzle, board, string, sol} = printPuzzle();\n    const ogiven = string; //fill this with elliot's numbers\n    //ogiven[1] = 8;  //set the first row second column number to 8, unchangeable by the user\n    const val = [];\n    const re = /^[1-9\\b]$/;\n    const sqr = [];\n      for (let i = 0; i < ogiven.length; i++){\n        if(re.test(ogiven.charAt(i))){\n            val[i] = false;\n        }\n        else{\n            val[i] = true;\n        }\n        sqr.push(ogiven.charAt(i));\n    }\n    this.state = {\n        squares: sqr,\n        given: ogiven,\n        valSpots: val,\n        sol: sol\n    };\n    console.log(sqr);\n    console.log(string);\n    console.log(sol);*/\n\n    this.fetchData = async () => {\n      const response = await fetch('/api/sudokleQueries/getDailySudokuGrid');\n      const body = response.json();\n      return body;\n    };\n\n    this.handleKeyPress = event => {\n      const re = /^[0-9\\b]+$/;\n\n      if (re.test(event.key)) {\n        const squares = this.state.squares.slice();\n        squares[0] = \"valid\";\n      } else {\n        console.log(\"no\");\n      }\n    };\n\n    this.getInputValue = event => {\n      if (this.state.given === this.state.sol) {\n        console.log(\"Solved!!\");\n      } //let the input field change only if it's being changed to a number 0-9\n\n\n      const re = /[1-9]/; //const back = /[\\b]/;\n\n      const index = parseInt(event.target.name);\n      const input = event.target.value.trim();\n      let validSpot = this.state.valSpots[index]; //console.log(this.state.valSpots[index]);\n      //console.log(this.state.given[1]);\n\n      if ((re.test(input) || input === \"\") && validSpot) {\n        const squares = this.state.squares.slice();\n        const given = this.state.given.slice().substring(0, index) + input + this.state.given.slice().substring(index + 1);\n        console.log(this.state.given.slice().substring(index + input.length));\n        console.log(given);\n        squares[index] = input;\n        this.setState({\n          valSpots: this.state.valSpots,\n          sol: this.state.sol,\n          solved: false,\n          squares: squares,\n          given: this.state.sol\n        });\n      } else {\n        //flash a warning maybe?\n        event.target.value = this.state.squares[event.target.name];\n      }\n    };\n\n    this.state = {\n      squares: [],\n      given: \"\",\n      valSpots: [],\n      sol: \"\",\n      solved: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData().then(res => {\n      const puzzles = res[0].puzzles;\n      const solution = res[0].solution;\n      const val = [];\n      const re = /^[1-9\\b]$/;\n      const sqr = [];\n\n      for (let i = 0; i < puzzles.length; i++) {\n        if (re.test(puzzles.charAt(i))) {\n          val[i] = false;\n        } else {\n          val[i] = true;\n        }\n\n        sqr.push(puzzles.charAt(i));\n      }\n\n      this.setState({\n        squares: sqr,\n        given: puzzles,\n        valSpots: val,\n        sol: solution,\n        solved: false\n      });\n    }) //.then(res => console.log(res))\n    .catch(err => console.log(err));\n  }\n\n  renderRow(i) {\n    const row = [];\n    let numSquares = 9;\n\n    for (let c = i; c < i + 9; c++) {\n      var liClasses = classNames({\n        'one': true,\n        'top': i === 0 || i === 3 * numSquares || i === 6 * numSquares,\n        'bot': i === (numSquares - 1) * numSquares,\n        'lside': c === 0 || c % numSquares === 0 || c % numSquares === 3 || c % numSquares === 6,\n        'rside': c % numSquares === numSquares - 1,\n        'given': this.state.given[c] != null\n      });\n      row.push( /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autocomplete: \"off\",\n        className: liClasses,\n        name: c,\n        value: this.state.given[c],\n        onChange: this.getInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 22\n      }, this));\n    }\n\n    return row;\n  }\n\n  renderGrid() {\n    const grid = [];\n\n    for (let c = 0; c < 9; c++) {\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }, this));\n      grid.push(this.renderRow(9 * c));\n    }\n\n    return grid;\n  }\n\n  render() {\n    let status = 'Now Playing - Sudokle';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), this.renderGrid()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass SudokuGrid extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nexport default SudokuGrid;","map":{"version":3,"names":["React","ReactDOM","classNames","makePuzzle","pluck","printPuzzle","Grid","Component","constructor","props","fetchData","response","fetch","body","json","handleKeyPress","event","re","test","key","squares","state","slice","console","log","getInputValue","given","sol","index","parseInt","target","name","input","value","trim","validSpot","valSpots","substring","length","setState","solved","componentDidMount","then","res","puzzles","solution","val","sqr","i","charAt","push","catch","err","renderRow","row","numSquares","c","liClasses","renderGrid","grid","render","status","SudokuGrid"],"sources":["/Users/daviddu/Desktop/sudokle/sudokle/src/SudokuGrid.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './SudokuGrid.css';\nimport classNames from 'classnames'\nimport {makePuzzle, pluck, printPuzzle} from \"./sudoku\";\n\nclass Grid extends React.Component {\n    constructor(props){\n        super(props);\n        /*const {puzzle, board, string, sol} = printPuzzle();\n        const ogiven = string; //fill this with elliot's numbers\n        //ogiven[1] = 8;  //set the first row second column number to 8, unchangeable by the user\n        const val = [];\n        const re = /^[1-9\\b]$/;\n        const sqr = [];\n\n\n        for (let i = 0; i < ogiven.length; i++){\n            if(re.test(ogiven.charAt(i))){\n                val[i] = false;\n            }\n            else{\n                val[i] = true;\n            }\n            sqr.push(ogiven.charAt(i));\n        }\n        this.state = {\n            squares: sqr,\n            given: ogiven,\n            valSpots: val,\n            sol: sol\n        };\n        console.log(sqr);\n        console.log(string);\n        console.log(sol);*/\n        this.state = {\n            squares: [],\n            given: \"\",\n            valSpots: [],\n            sol: \"\",\n            solved: false\n        };\n    }\n\n\n    componentDidMount() {\n\n        this.fetchData()\n            .then(res => {\n\n\n                const puzzles = res[0].puzzles;\n                const solution = res[0].solution;\n\n                const val = [];\n                const re = /^[1-9\\b]$/;\n                const sqr = [];\n\n\n                for (let i = 0; i < puzzles.length; i++){\n                    if(re.test(puzzles.charAt(i))){\n                        val[i] = false;\n                    }\n                    else{\n                        val[i] = true;\n                    }\n                    sqr.push(puzzles.charAt(i));\n                }\n                this.setState( {\n                    squares: sqr,\n                    given: puzzles,\n                    valSpots: val,\n                    sol: solution,\n                    solved: false\n                });\n\n\n            })\n            //.then(res => console.log(res))\n            .catch(err => console.log(err));\n\n\n\n    }\n\n    fetchData = async () => {\n        const response = await fetch('/api/sudokleQueries/getDailySudokuGrid');\n        const body = response.json();\n        return body;\n    };\n\n\n    handleKeyPress = (event) => {\n        const re = /^[0-9\\b]+$/;\n        if(re.test(event.key)){\n            const squares = this.state.squares.slice();\n            squares[0] = \"valid\";\n        }\n        else{\n            console.log(\"no\");\n        }\n    }\n\n    getInputValue = (event)=>{\n        if(this.state.given === this.state.sol){\n            console.log(\"Solved!!\");\n        }\n        //let the input field change only if it's being changed to a number 0-9\n        const re = /[1-9]/;\n        //const back = /[\\b]/;\n        const index = parseInt(event.target.name);\n        const input = event.target.value.trim();\n        let validSpot = (this.state.valSpots[index]);\n        //console.log(this.state.valSpots[index]);\n        //console.log(this.state.given[1]);\n        if((re.test(input) || input===\"\") && validSpot){\n            const squares = this.state.squares.slice();\n            const given = this.state.given.slice().substring(0, index) + input + this.state.given.slice().substring(index + 1);\n            console.log(this.state.given.slice().substring(index + input.length));\n            console.log(given);\n            squares[index] = input;\n            this.setState({\n                valSpots: this.state.valSpots,\n                sol: this.state.sol,\n                solved: false,\n                squares: squares,\n                given: this.state.sol\n            });\n        }\n        else{\n            //flash a warning maybe?\n            event.target.value = this.state.squares[event.target.name];\n        }\n    };\n\n    renderRow(i){\n        const row = [];\n        let numSquares = 9;\n        for(let c=i; c<i+9; c++){\n            var liClasses = classNames({\n                'one': true,\n                'top': i===0 || i===3*numSquares || i===6*numSquares,\n                'bot': i===(numSquares-1)*numSquares,\n                'lside': c===0 || c%numSquares===0 || c%numSquares===3 || c%numSquares===6,\n                'rside': c%(numSquares)===(numSquares-1),\n                'given': this.state.given[c] != null,\n            });\n            row.push(<input type=\"text\" autocomplete=\"off\" className={liClasses} name={c} value={this.state.given[c]} onChange={this.getInputValue} />);\n        }\n        return row;\n    }\n    renderGrid(){\n        const grid = [];\n        for(let c=0; c<9; c++){\n            grid.push(<div className=\"board-row\"></div>);\n            grid.push(this.renderRow(9*c));\n        }\n        return grid;\n    }\n\n    render() {\n        let status = 'Now Playing - Sudokle';\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {this.renderGrid()}\n            </div>\n        );\n    }\n}\n\nclass SudokuGrid extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Grid/>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nexport default SudokuGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module"}