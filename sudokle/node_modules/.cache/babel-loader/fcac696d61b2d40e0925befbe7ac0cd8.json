{"ast":null,"code":"var _jsxFileName = \"/Users/daviddu/Desktop/sudokle/sudokle/src/SudokuGrid.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './SudokuGrid.css';\nimport classNames from 'classnames';\nimport { makePuzzle, pluck, printPuzzle } from \"./sudoku\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchData = async () => {\n      const response = await fetch('/api/sudokleQueries/getDailySudokuGrid');\n      const body = response.json();\n      return body;\n    };\n\n    this.handleKeyPress = event => {\n      const re = /^[0-9\\b]+$/;\n\n      if (re.test(event.key)) {\n        const squares = this.state.squares.slice();\n        squares[0] = \"valid\";\n      } else {\n        console.log(\"no\");\n      }\n    };\n\n    this.handleSolved = async () => {\n      try {\n        let res = await fetch('/api/sudokleQueries/updateUser', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            dailyPuzzleTimedSolved: this.state.seconds,\n            averageTimeSolvedWeek: this.state.seconds,\n            userEmail: this.state.userEmail\n          })\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.getInputValue = event => {\n      //let the input field change only if it's being changed to a number 0-9\n      const re = /^[1-9\\b]$/; //const back = /[\\b]/;\n\n      const index = parseInt(event.target.name);\n      let input = event.target.value.trim();\n      let validSpot = this.state.valSpots[index]; //console.log(this.state.valSpots[index]);\n      //console.log(this.state.given[1]);\n\n      if ((re.test(input) || input === \"\") && validSpot) {\n        if (input === \"\") {\n          input = \" \";\n        }\n\n        const squares = this.state.squares.slice();\n        const given = this.state.given.slice().substring(0, index) + input + this.state.given.slice().substring(index + 1); //const given = this.state.sol;\n\n        squares[index] = input;\n        this.setState({\n          valSpots: this.state.valSpots,\n          sol: this.state.sol,\n          solved: false,\n          squares: squares,\n          given: given\n        });\n\n        if (given === this.state.sol) {\n          this.setState({\n            solved: true\n          });\n          this.handleSolved().then(res => {\n            console.log(\"Solved!!\");\n          });\n        }\n      } else {\n        //flash a warning maybe?\n        event.target.value = this.state.squares[event.target.name];\n      }\n    };\n\n    this.state = {\n      squares: [],\n      given: \"\",\n      valSpots: [],\n      sol: \"\",\n      solved: false,\n      time: {\n        h: 0,\n        m: 0,\n        s: 0\n      },\n      seconds: 0,\n      userEmail: \"\"\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countUp = this.countUp.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let dm = secs % (60 * 60);\n    let minutes = Math.floor(dm / 60);\n    let ds = dm % 60;\n    let seconds = Math.ceil(ds);\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds\n    };\n    return obj;\n  }\n\n  startTimer() {\n    if (this.timer === 0) {\n      this.timer = setInterval(this.countUp, 1000);\n    }\n  }\n\n  countUp() {\n    let seconds = this.state.seconds + 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    });\n  }\n\n  componentDidMount() {\n    this.fetchData().then(res => {\n      const puzzles = res[0].puzzles;\n      const solution = res[0].solution;\n      const val = [];\n      const re = /^[1-9\\b]$/;\n      const sqr = [];\n\n      for (let i = 0; i < puzzles.length; i++) {\n        if (re.test(puzzles.charAt(i))) {\n          val[i] = false;\n        } else {\n          val[i] = true;\n        }\n\n        sqr.push(puzzles.charAt(i));\n      }\n\n      this.setState({\n        squares: sqr,\n        given: puzzles,\n        valSpots: val,\n        sol: solution,\n        solved: false,\n        time: {\n          h: 0,\n          m: 0,\n          s: 0\n        }\n      });\n    }) //.then(res => console.log(res))\n    .catch(err => console.log(err));\n  }\n\n  renderRow(i) {\n    const row = [];\n    let numSquares = 9;\n\n    for (let c = i; c < i + 9; c++) {\n      var liClasses = classNames({\n        'one': true,\n        'top': i === 0 || i === 3 * numSquares || i === 6 * numSquares,\n        'bot': i === (numSquares - 1) * numSquares,\n        'lside': c === 0 || c % numSquares === 0 || c % numSquares === 3 || c % numSquares === 6,\n        'rside': c % numSquares === numSquares - 1,\n        'given': this.state.given[c] != null\n      });\n      row.push( /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autocomplete: \"off\",\n        className: liClasses,\n        name: c,\n        value: this.state.given[c],\n        onChange: this.getInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 22\n      }, this));\n    }\n\n    return row;\n  }\n\n  renderGrid() {\n    const grid = [];\n\n    for (let c = 0; c < 9; c++) {\n      grid.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 23\n      }, this));\n      grid.push(this.renderRow(9 * c));\n    }\n\n    return grid;\n  }\n\n  render() {\n    let status = 'Now Playing - Sudokle';\n\n    if (this.state.seconds === 0) {\n      this.startTimer();\n    }\n\n    if (this.state.solved) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/Splash\",\n        state: {\n          minutes: this.state.time.m,\n          seconds: this.state.time.s\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), this.renderGrid(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"m: \", this.state.time.m, \" s: \", this.state.time.s]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nclass SudokuGrid extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nexport default SudokuGrid;","map":{"version":3,"names":["React","ReactDOM","classNames","makePuzzle","pluck","printPuzzle","Navigate","Grid","Component","constructor","props","fetchData","response","fetch","body","json","handleKeyPress","event","re","test","key","squares","state","slice","console","log","handleSolved","res","method","headers","JSON","stringify","dailyPuzzleTimedSolved","seconds","averageTimeSolvedWeek","userEmail","e","getInputValue","index","parseInt","target","name","input","value","trim","validSpot","valSpots","given","substring","setState","sol","solved","then","time","h","m","s","timer","startTimer","bind","countUp","secondsToTime","secs","hours","Math","floor","dm","minutes","ds","ceil","obj","setInterval","componentDidMount","puzzles","solution","val","sqr","i","length","charAt","push","catch","err","renderRow","row","numSquares","c","liClasses","renderGrid","grid","render","status","SudokuGrid"],"sources":["/Users/daviddu/Desktop/sudokle/sudokle/src/SudokuGrid.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './SudokuGrid.css';\nimport classNames from 'classnames'\nimport {makePuzzle, pluck, printPuzzle} from \"./sudoku\";\nimport {Navigate} from 'react-router-dom';\n\nclass Grid extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            squares: [],\n            given: \"\",\n            valSpots: [],\n            sol: \"\",\n            solved: false,\n            time: {\n                h: 0,\n                m: 0,\n                s: 0\n            },\n            seconds: 0,\n            userEmail: \"\"\n        };\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countUp = this.countUp.bind(this);\n    }\n\n    secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n\n        let dm = secs % (60 * 60);\n        let minutes = Math.floor(dm / 60);\n\n        let ds = dm % 60;\n        let seconds = Math.ceil(ds);\n\n        let obj = {\n            h: hours,\n            m: minutes,\n            s: seconds\n        };\n        return obj;\n    }\n\n    startTimer() {\n        if (this.timer === 0) {\n            this.timer = setInterval(this.countUp, 1000);\n        }\n    }\n\n    countUp() {\n        let seconds = this.state.seconds + 1;\n\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds,\n        });\n\n    }\n\n    componentDidMount() {\n\n        this.fetchData()\n            .then(res => {\n\n\n                const puzzles = res[0].puzzles;\n                const solution = res[0].solution;\n\n                const val = [];\n                const re = /^[1-9\\b]$/;\n                const sqr = [];\n\n\n                for (let i = 0; i < puzzles.length; i++){\n                    if(re.test(puzzles.charAt(i))){\n                        val[i] = false;\n                    }\n                    else{\n                        val[i] = true;\n                    }\n                    sqr.push(puzzles.charAt(i));\n                }\n                this.setState( {\n                    squares: sqr,\n                    given: puzzles,\n                    valSpots: val,\n                    sol: solution,\n                    solved: false,\n                    time: {\n                        h: 0,\n                        m: 0,\n                        s: 0\n                    }\n                });\n\n\n            })\n            //.then(res => console.log(res))\n            .catch(err => console.log(err));\n\n    }\n\n    fetchData = async () => {\n        const response = await fetch('/api/sudokleQueries/getDailySudokuGrid');\n        const body = response.json();\n        return body;\n    };\n\n\n    handleKeyPress = (event) => {\n        const re = /^[0-9\\b]+$/;\n        if(re.test(event.key)){\n            const squares = this.state.squares.slice();\n            squares[0] = \"valid\";\n        }\n        else{\n            console.log(\"no\");\n        }\n    }\n\n    handleSolved = async() => {\n        try{\n            let res = await fetch('/api/sudokleQueries/updateUser', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    dailyPuzzleTimedSolved: this.state.seconds,\n                    averageTimeSolvedWeek: this.state.seconds,\n                    userEmail: this.state.userEmail\n                }),\n            });\n        }\n        catch (e) {\n            console.log(e);\n        }\n\n    }\n\n    getInputValue = (event)=>{\n        //let the input field change only if it's being changed to a number 0-9\n        const re = /^[1-9\\b]$/;\n        //const back = /[\\b]/;\n        const index = parseInt(event.target.name);\n        let input = event.target.value.trim();\n        let validSpot = (this.state.valSpots[index]);\n        //console.log(this.state.valSpots[index]);\n        //console.log(this.state.given[1]);\n        if((re.test(input) || input===\"\") && validSpot){\n            if(input === \"\"){\n                input = \" \";\n            }\n            const squares = this.state.squares.slice();\n            const given = this.state.given.slice().substring(0, index) + input + this.state.given.slice().substring(index + 1);\n            //const given = this.state.sol;\n            squares[index] = input;\n            this.setState({\n                valSpots: this.state.valSpots,\n                sol: this.state.sol,\n                solved: false,\n                squares: squares,\n                given: given\n            });\n            if(given === this.state.sol){\n                this.setState({\n                    solved: true\n                });\n                this.handleSolved()\n                    .then(res => {\n                        console.log(\"Solved!!\");\n                    });\n            }\n        }\n        else{\n            //flash a warning maybe?\n            event.target.value = this.state.squares[event.target.name];\n        }\n    };\n\n    renderRow(i){\n        const row = [];\n        let numSquares = 9;\n        for(let c=i; c<i+9; c++){\n            var liClasses = classNames({\n                'one': true,\n                'top': i===0 || i===3*numSquares || i===6*numSquares,\n                'bot': i===(numSquares-1)*numSquares,\n                'lside': c===0 || c%numSquares===0 || c%numSquares===3 || c%numSquares===6,\n                'rside': c%(numSquares)===(numSquares-1),\n                'given': this.state.given[c] != null,\n            });\n            row.push(<input type=\"text\" autocomplete=\"off\" className={liClasses} name={c} value={this.state.given[c]} onChange={this.getInputValue} />);\n        }\n        return row;\n    }\n    renderGrid(){\n        const grid = [];\n        for(let c=0; c<9; c++){\n            grid.push(<div className=\"board-row\"></div>);\n            grid.push(this.renderRow(9*c));\n        }\n        return grid;\n    }\n\n    render() {\n        let status = 'Now Playing - Sudokle';\n        if(this.state.seconds === 0){\n            this.startTimer();\n        }\n\n        if(this.state.solved){\n            return(\n                <Navigate to=\"/Splash\" state={{\n                    minutes: this.state.time.m,\n                    seconds: this.state.time.s}}/>\n            );\n        }\n        else{\n            return (\n                <div>\n                    <div className=\"status\">{status}</div>\n                    {this.renderGrid()}\n                    <div className=\"timer\">\n                        <p>m: {this.state.time.m} s: {this.state.time.s}</p>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nclass SudokuGrid extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Grid/>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nexport default SudokuGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module"}